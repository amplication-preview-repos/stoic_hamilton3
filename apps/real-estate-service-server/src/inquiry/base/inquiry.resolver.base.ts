/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Inquiry } from "./Inquiry";
import { InquiryCountArgs } from "./InquiryCountArgs";
import { InquiryFindManyArgs } from "./InquiryFindManyArgs";
import { InquiryFindUniqueArgs } from "./InquiryFindUniqueArgs";
import { CreateInquiryArgs } from "./CreateInquiryArgs";
import { UpdateInquiryArgs } from "./UpdateInquiryArgs";
import { DeleteInquiryArgs } from "./DeleteInquiryArgs";
import { Property } from "../../property/base/Property";
import { InquiryService } from "../inquiry.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Inquiry)
export class InquiryResolverBase {
  constructor(
    protected readonly service: InquiryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Inquiry",
    action: "read",
    possession: "any",
  })
  async _inquiriesMeta(
    @graphql.Args() args: InquiryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Inquiry])
  @nestAccessControl.UseRoles({
    resource: "Inquiry",
    action: "read",
    possession: "any",
  })
  async inquiries(
    @graphql.Args() args: InquiryFindManyArgs
  ): Promise<Inquiry[]> {
    return this.service.inquiries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Inquiry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Inquiry",
    action: "read",
    possession: "own",
  })
  async inquiry(
    @graphql.Args() args: InquiryFindUniqueArgs
  ): Promise<Inquiry | null> {
    const result = await this.service.inquiry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Inquiry)
  @nestAccessControl.UseRoles({
    resource: "Inquiry",
    action: "create",
    possession: "any",
  })
  async createInquiry(
    @graphql.Args() args: CreateInquiryArgs
  ): Promise<Inquiry> {
    return await this.service.createInquiry({
      ...args,
      data: {
        ...args.data,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Inquiry)
  @nestAccessControl.UseRoles({
    resource: "Inquiry",
    action: "update",
    possession: "any",
  })
  async updateInquiry(
    @graphql.Args() args: UpdateInquiryArgs
  ): Promise<Inquiry | null> {
    try {
      return await this.service.updateInquiry({
        ...args,
        data: {
          ...args.data,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Inquiry)
  @nestAccessControl.UseRoles({
    resource: "Inquiry",
    action: "delete",
    possession: "any",
  })
  async deleteInquiry(
    @graphql.Args() args: DeleteInquiryArgs
  ): Promise<Inquiry | null> {
    try {
      return await this.service.deleteInquiry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  @nestAccessControl.UseRoles({
    resource: "Property",
    action: "read",
    possession: "any",
  })
  async getProperty(
    @graphql.Parent() parent: Inquiry
  ): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
