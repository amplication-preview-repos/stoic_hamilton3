/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Inquiry as PrismaInquiry,
  Property as PrismaProperty,
} from "@prisma/client";

export class InquiryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.InquiryCountArgs, "select">): Promise<number> {
    return this.prisma.inquiry.count(args);
  }

  async inquiries<T extends Prisma.InquiryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InquiryFindManyArgs>
  ): Promise<PrismaInquiry[]> {
    return this.prisma.inquiry.findMany<Prisma.InquiryFindManyArgs>(args);
  }
  async inquiry<T extends Prisma.InquiryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InquiryFindUniqueArgs>
  ): Promise<PrismaInquiry | null> {
    return this.prisma.inquiry.findUnique(args);
  }
  async createInquiry<T extends Prisma.InquiryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InquiryCreateArgs>
  ): Promise<PrismaInquiry> {
    return this.prisma.inquiry.create<T>(args);
  }
  async updateInquiry<T extends Prisma.InquiryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InquiryUpdateArgs>
  ): Promise<PrismaInquiry> {
    return this.prisma.inquiry.update<T>(args);
  }
  async deleteInquiry<T extends Prisma.InquiryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InquiryDeleteArgs>
  ): Promise<PrismaInquiry> {
    return this.prisma.inquiry.delete(args);
  }

  async getProperty(parentId: string): Promise<PrismaProperty | null> {
    return this.prisma.inquiry
      .findUnique({
        where: { id: parentId },
      })
      .property();
  }
}
